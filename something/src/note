type A = &'a str
type B = &'b str

given F<'a, T> = &'a T
A = F<'a, str>
B = F<'b, str>
to use A in place of B, we need A: B
for A: B to be true, then 'a: 'b
since &'a T is covariant over 'a

self: &'b Self = &'b GraphSolver<Node, Weight, Connections>
start: &'c Node
end: &'d Node
edges: &'b Connections
<Self as Graph<Node, Weight, Connections>>::get_connections_from(&'b Graph<Node, Weight, Connections>, &'c Node) -> Option<&'b Connections>;

result: Option<&'b Weight>
<Connections as ConnectionCollection<Node, Weight>>::get_weight_to(&'b Connections, &'d Node) -> Option<&'b Weight>;

<&'b Connections as IntoIterator>::into_iter(&'b Connections) -> ???
item: ConnectionTo<&'b Node, &'b Weight>
next: &'b Node
weight: &'b Weight

visited: &'e mut HashSet<&'f Node>
HashSet::<&'f Node>::(&'e Self, &'f Node)
&'b Node: &'f Node -> 'b: 'f
